//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public JoystickHandleAnchoredPositionListenerComponent joystickHandleAnchoredPositionListener { get { return (JoystickHandleAnchoredPositionListenerComponent)GetComponent(GameComponentsLookup.JoystickHandleAnchoredPositionListener); } }
    public bool hasJoystickHandleAnchoredPositionListener { get { return HasComponent(GameComponentsLookup.JoystickHandleAnchoredPositionListener); } }

    public void AddJoystickHandleAnchoredPositionListener(System.Collections.Generic.List<IJoystickHandleAnchoredPositionListener> newValue) {
        var index = GameComponentsLookup.JoystickHandleAnchoredPositionListener;
        var component = (JoystickHandleAnchoredPositionListenerComponent)CreateComponent(index, typeof(JoystickHandleAnchoredPositionListenerComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceJoystickHandleAnchoredPositionListener(System.Collections.Generic.List<IJoystickHandleAnchoredPositionListener> newValue) {
        var index = GameComponentsLookup.JoystickHandleAnchoredPositionListener;
        var component = (JoystickHandleAnchoredPositionListenerComponent)CreateComponent(index, typeof(JoystickHandleAnchoredPositionListenerComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveJoystickHandleAnchoredPositionListener() {
        RemoveComponent(GameComponentsLookup.JoystickHandleAnchoredPositionListener);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherJoystickHandleAnchoredPositionListener;

    public static Entitas.IMatcher<GameEntity> JoystickHandleAnchoredPositionListener {
        get {
            if (_matcherJoystickHandleAnchoredPositionListener == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.JoystickHandleAnchoredPositionListener);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherJoystickHandleAnchoredPositionListener = matcher;
            }

            return _matcherJoystickHandleAnchoredPositionListener;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public void AddJoystickHandleAnchoredPositionListener(IJoystickHandleAnchoredPositionListener value) {
        var listeners = hasJoystickHandleAnchoredPositionListener
            ? joystickHandleAnchoredPositionListener.value
            : new System.Collections.Generic.List<IJoystickHandleAnchoredPositionListener>();
        listeners.Add(value);
        ReplaceJoystickHandleAnchoredPositionListener(listeners);
    }

    public void RemoveJoystickHandleAnchoredPositionListener(IJoystickHandleAnchoredPositionListener value, bool removeComponentWhenEmpty = true) {
        var listeners = joystickHandleAnchoredPositionListener.value;
        listeners.Remove(value);
        if (removeComponentWhenEmpty && listeners.Count == 0) {
            RemoveJoystickHandleAnchoredPositionListener();
        } else {
            ReplaceJoystickHandleAnchoredPositionListener(listeners);
        }
    }
}
