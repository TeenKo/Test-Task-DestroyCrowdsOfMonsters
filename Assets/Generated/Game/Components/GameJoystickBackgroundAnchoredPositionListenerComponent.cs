//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public JoystickBackgroundAnchoredPositionListenerComponent joystickBackgroundAnchoredPositionListener { get { return (JoystickBackgroundAnchoredPositionListenerComponent)GetComponent(GameComponentsLookup.JoystickBackgroundAnchoredPositionListener); } }
    public bool hasJoystickBackgroundAnchoredPositionListener { get { return HasComponent(GameComponentsLookup.JoystickBackgroundAnchoredPositionListener); } }

    public void AddJoystickBackgroundAnchoredPositionListener(System.Collections.Generic.List<IJoystickBackgroundAnchoredPositionListener> newValue) {
        var index = GameComponentsLookup.JoystickBackgroundAnchoredPositionListener;
        var component = (JoystickBackgroundAnchoredPositionListenerComponent)CreateComponent(index, typeof(JoystickBackgroundAnchoredPositionListenerComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceJoystickBackgroundAnchoredPositionListener(System.Collections.Generic.List<IJoystickBackgroundAnchoredPositionListener> newValue) {
        var index = GameComponentsLookup.JoystickBackgroundAnchoredPositionListener;
        var component = (JoystickBackgroundAnchoredPositionListenerComponent)CreateComponent(index, typeof(JoystickBackgroundAnchoredPositionListenerComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveJoystickBackgroundAnchoredPositionListener() {
        RemoveComponent(GameComponentsLookup.JoystickBackgroundAnchoredPositionListener);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherJoystickBackgroundAnchoredPositionListener;

    public static Entitas.IMatcher<GameEntity> JoystickBackgroundAnchoredPositionListener {
        get {
            if (_matcherJoystickBackgroundAnchoredPositionListener == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.JoystickBackgroundAnchoredPositionListener);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherJoystickBackgroundAnchoredPositionListener = matcher;
            }

            return _matcherJoystickBackgroundAnchoredPositionListener;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public void AddJoystickBackgroundAnchoredPositionListener(IJoystickBackgroundAnchoredPositionListener value) {
        var listeners = hasJoystickBackgroundAnchoredPositionListener
            ? joystickBackgroundAnchoredPositionListener.value
            : new System.Collections.Generic.List<IJoystickBackgroundAnchoredPositionListener>();
        listeners.Add(value);
        ReplaceJoystickBackgroundAnchoredPositionListener(listeners);
    }

    public void RemoveJoystickBackgroundAnchoredPositionListener(IJoystickBackgroundAnchoredPositionListener value, bool removeComponentWhenEmpty = true) {
        var listeners = joystickBackgroundAnchoredPositionListener.value;
        listeners.Remove(value);
        if (removeComponentWhenEmpty && listeners.Count == 0) {
            RemoveJoystickBackgroundAnchoredPositionListener();
        } else {
            ReplaceJoystickBackgroundAnchoredPositionListener(listeners);
        }
    }
}
