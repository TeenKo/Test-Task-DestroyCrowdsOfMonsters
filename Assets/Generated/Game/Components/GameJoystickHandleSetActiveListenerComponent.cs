//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public JoystickHandleSetActiveListenerComponent joystickHandleSetActiveListener { get { return (JoystickHandleSetActiveListenerComponent)GetComponent(GameComponentsLookup.JoystickHandleSetActiveListener); } }
    public bool hasJoystickHandleSetActiveListener { get { return HasComponent(GameComponentsLookup.JoystickHandleSetActiveListener); } }

    public void AddJoystickHandleSetActiveListener(System.Collections.Generic.List<IJoystickHandleSetActiveListener> newValue) {
        var index = GameComponentsLookup.JoystickHandleSetActiveListener;
        var component = (JoystickHandleSetActiveListenerComponent)CreateComponent(index, typeof(JoystickHandleSetActiveListenerComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceJoystickHandleSetActiveListener(System.Collections.Generic.List<IJoystickHandleSetActiveListener> newValue) {
        var index = GameComponentsLookup.JoystickHandleSetActiveListener;
        var component = (JoystickHandleSetActiveListenerComponent)CreateComponent(index, typeof(JoystickHandleSetActiveListenerComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveJoystickHandleSetActiveListener() {
        RemoveComponent(GameComponentsLookup.JoystickHandleSetActiveListener);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherJoystickHandleSetActiveListener;

    public static Entitas.IMatcher<GameEntity> JoystickHandleSetActiveListener {
        get {
            if (_matcherJoystickHandleSetActiveListener == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.JoystickHandleSetActiveListener);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherJoystickHandleSetActiveListener = matcher;
            }

            return _matcherJoystickHandleSetActiveListener;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public void AddJoystickHandleSetActiveListener(IJoystickHandleSetActiveListener value) {
        var listeners = hasJoystickHandleSetActiveListener
            ? joystickHandleSetActiveListener.value
            : new System.Collections.Generic.List<IJoystickHandleSetActiveListener>();
        listeners.Add(value);
        ReplaceJoystickHandleSetActiveListener(listeners);
    }

    public void RemoveJoystickHandleSetActiveListener(IJoystickHandleSetActiveListener value, bool removeComponentWhenEmpty = true) {
        var listeners = joystickHandleSetActiveListener.value;
        listeners.Remove(value);
        if (removeComponentWhenEmpty && listeners.Count == 0) {
            RemoveJoystickHandleSetActiveListener();
        } else {
            ReplaceJoystickHandleSetActiveListener(listeners);
        }
    }
}
